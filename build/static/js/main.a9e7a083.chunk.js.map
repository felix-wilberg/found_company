{"version":3,"sources":["utils/constants.js","Components/HeroSection.js","Components/Form.js","Components/Footer.js","Components/ContractOverview.js","Components/ConnectWalletButton.js","Components/Navbar.js","Components/TxList.js","Components/Main.js","Components/Loader.js","Components/SuccessPayed.js","Components/SuccessFounded.js","Components/SuccessDissolved.js","Components/SuccessLeave.js","Components/LeaveOrDissolveCompany.js","Components/App.js","serviceWorker.js","index.js"],"names":["contractABI","abi","contractAddress","HeroSection","id","className","size","href","role","Form","contractSigner","useStore","state","companyId","companyInfo","addCompanyInfo","useState","companyFounded","setCompanyFounded","isLoading","setIsLoading","handleTransfer","e","a","preventDefault","data","FormData","target","get","alert","found","on","companyName","foundingCapitalGoal","memberAmount","event","console","log","toString","toNumber","txHash","transactionHash","removeAllListeners","message","onSubmit","label","placeholder","name","type","textarea","rows","Footer","bgColor","style","backgroundColor","ContractOverview","isReceived","setIsReceived","companyBalance","companyMembers","contractProvider","getCompanyInfo","getCompany","getCompanyById","setState","getCompanyBalanceById","getMembersById","payShare","share","value","addressSender","disabled","fab","icon","SuccessPayed","ConnectWalletButton","currentAccount","isLoggedIn","connectWalletHandler","window","ethereum","request","method","accounts","onClick","substring","length","Navbar","fixed","expand","light","aria-controls","aria-expanded","aria-label","fas","src","height","alt","right","active","aria-current","TxList","eventList","setEventList","fetchOldEvents","queryFilter","items","useEffect","catch","error","sort","eventOne","eventTwo","blockNumber","map","index","args","key","foundingcapitalgoal","sender","Main","Loader","Success","data-mdb-color","SuccessFounded","SuccessDissolved","isDissolved","SuccessLeave","isLeft","LeaveOrDissolveCompany","isLoadingDissolve","setIsLoadingDissolve","setIsDissolved","isLoadingLeave","setIsLoadingLeave","setIsLeft","dissolveCompany","dissolveCompanyInput","leaveCompany","leaveCompanyInput","create","set","isFounded","address","txs","amountShareHolders","foundingCapital","contractInfo","governance","formData","balanceInfo","balance","company","App","checkWalletIsConnected","then","r","createEthereumContract","account","provider","ethers","providers","Web3Provider","signer","getSigner","companyContractSigner","Contract","companyContractProvider","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a9e7a083.chunk.js","sourcesContent":["import abi from \"../abis/Company.json\";\n\n//Once contract deployed or updated, contact address needs to be updated\nexport const contractABI = abi.abi;\nexport const contractAddress = \"0x921cc1154758c60042a8AAC75Abd2f04D6B67B54\";","import React from \"react\";\nimport {MDBContainer, MDBRow, MDBCol } from 'mdb-react-ui-kit'\n\n\n\n\nconst HeroSection= () => {\n\n\n\n    return (\n        <div id='HeroSection'>\n        <MDBContainer className='pt-5 pb-5'>\n            <div className='p-5 mt-5 text-center' id='test'>\n                <MDBRow className='pt-5 pb-5'>\n                    <MDBCol className='pt-5' size='12'>\n                        <h1 className='mt-5 mb-5'>Unternehmensgründung auf der Blockchain</h1>\n                        <p className='mt-5 mb-5'>Schluss mit Bürokratie und wochenlangen Wartezeiten. <br/>Starte und verwalte den Gründungsprozess deiner neuen Firma einfach und bequem von zu Hause.</p>\n                        <a className='btn btn-primary' href='/#FoundCompany' role='button' >\n                        Jetzt gründen\n                        </a>\n                    </MDBCol>\n                </MDBRow>\n            </div>\n        </MDBContainer>\n        </div>\n    );\n}\nexport default HeroSection;","import React, {useState} from 'react';\nimport { MDBCol, MDBContainer, MDBInput, MDBRow, MDBBtn } from 'mdb-react-ui-kit';\nimport {useStore} from \"./App\";\nimport { Loader, SuccessFounded} from \"./index\";\n\n\n\n\nconst Form = () => {\n    //load all needed states\n    const contractSigner = useStore((state) => state.contractSigner)\n    const companyId = useStore((state)  => state.companyId)\n    const companyInfo = useStore((state)  => state.companyInfo)\n    const addCompanyInfo = useStore((state) => state.addCompanyInfo)\n\n    const [companyFounded, setCompanyFounded] = useState(null);\n    const [isLoading, setIsLoading] = useState(null);\n\n\n    const handleTransfer = async (e) => {\n        e.preventDefault();\n        //get all data of the form\n        const data = new FormData(e.target);\n        //check if all needed fields are filled\n        if (!data.get(\"companyName\") || !data.get(\"foundingCapital\") || !data.get(\"amountShareholders\")) {alert(\"Bitte fülle das Formular aus.\"); return;}\n        //execute found company function, if company already exists, throw error alert\n        try {\n            setIsLoading(true);\n            await contractSigner.found(data.get(\"companyName\"), data.get(\"foundingCapital\"), data.get(\"amountShareholders\"));\n            contractSigner.on(\"Founded\", (companyId,companyName,foundingCapitalGoal,memberAmount, event) => {\n                setIsLoading(false);\n                console.log({companyId: companyId.toString(),companyName: companyName.toString(),foundingCapitalGoal: foundingCapitalGoal.toString(), memberAmount: memberAmount.toNumber(), txHash: event.transactionHash});\n                setCompanyFounded({companyId: companyId.toString(),companyName: companyName.toString(),foundingCapitalGoal: foundingCapitalGoal.toString(),memberAmount: memberAmount.toNumber(), txHash: event.transactionHash});\n                return () => {\n                    contractSigner.removeAllListeners(\"Founded\");\n                }})\n            }\n        catch (error) {\n            console.log(error, typeof error, error.data);\n            alert(error.message);\n            setIsLoading(false);\n        }\n    };\n\n\n\n    return (\n        <div>\n        <MDBContainer>\n            <form onSubmit={handleTransfer}>\n                <MDBRow>\n                    <MDBCol>\n                        <MDBInput className='mb-3' label='Firmenname' placeholder=\"Firmenname\" name=\"companyName\" type='text'  />\n                        <MDBInput className='mb-3' label='Firmensitz' placeholder=\"Firmensitz\" name=\"city\" type='text'  />\n                        <MDBInput className='mb-3' label='Geschäftsführer' placeholder=\"Geschäftsführer\" name=\"managingDirector\" type='text'  />\n                        <MDBInput className='mb-3' label='Anteile' placeholder=\"Anteile\" name=\"amountShareholders\" type='number'  />\n\n                    </MDBCol>\n                    <MDBCol>\n                        <MDBInput className='mb-3' label='Stammkapital' placeholder=\"Stammkapital\" id='text' name=\"foundingCapital\" type='number'  />\n                        <MDBInput className='mb-3' label='Gegenstand der Firma' placeholder=\"Gegenstand der Firma\" name=\"companyWhy\" id='textarea' textarea rows={3}  />\n\n                        {isLoading\n                            ? <Loader />\n                            : (\n                                <div className='text-center'>\n                                    <MDBBtn type='submit' >Bestätigen</MDBBtn>\n                                </div>\n                            )\n                        }\n                        {companyFounded !== null\n                            && <SuccessFounded companyFounded={companyFounded}/>\n                        }\n                    </MDBCol>\n                </MDBRow>\n            </form>\n        </MDBContainer>\n        </div>\n\n    );\n}\n\nexport default Form;\n","import React from \"react\";\nimport { MDBFooter } from \"mdb-react-ui-kit\";\n\nconst Footer = () => {\n    return (\n        <MDBFooter bgColor='light' className='text-center text-lg-start text-muted'>\n          <section className='d-flex justify-content-center justify-content-lg-between p-4 '>\n          </section>\n    \n          <section className=''>\n            <div className='container text-center text-md-start mt-5'>\n              <div className='row mt-3'>\n                <div className='col-md-3 col-lg-4 col-xl-3 mx-auto mb-4'>\n                  <h6 className='text-uppercase fw-bold mb-4'>\n                    <i className></i>STABU - Start A Business\n                  </h6>\n                  <p>\n                  Schluss mit Bürokratie und wochenlangen Wartezeiten. Starte und verwalte den Gründungsprozess deiner neuen Firma einfach und bequem von zu Hause.\n                  </p>\n                </div>\n    \n    \n                {/* <div className='col-md-3 col-lg-2 col-xl-2 mx-auto mb-4'>\n                  <h6 className='text-uppercase fw-bold mb-4'>Useful links</h6>\n                  <p>\n                    <a href='#!' className='text-reset'>\n                      Pricing\n                    </a>\n                  </p>\n                  <p>\n                    <a href='#!' className='text-reset'>\n                      Settings\n                    </a>\n                  </p>\n                  <p>\n                    <a href='#!' className='text-reset'>\n                      Orders\n                    </a>\n                  </p>\n                  <p>\n                    <a href='#!' className='text-reset'>\n                      Help\n                    </a>\n                  </p>\n                </div> */}\n    \n                <div className='col-md-4 col-lg-3 col-xl-3 mx-auto mb-md-0 mb-4'>\n                  <h6 className='text-uppercase fw-bold mb-4'>Kontakt</h6>\n                  <p>\n                    <i className='fas fa-home me-3'></i> Sanderheinrichtsleitweg 20 97074 Würzburg\n                  </p>\n                  <p>\n                    <i className='fas fa-envelope me-3'></i>\n                    info@example.com\n                  </p>\n                  <p>\n                    <i className='fas fa-phone me-3'></i> + 01 234 567 88\n                  </p>\n                  <p>\n                    <i className='fas fa-print me-3'></i> + 01 234 567 89\n                  </p>\n                </div>\n              </div>\n            </div>\n          </section>\n    \n          <div className='text-center p-4' style={{ backgroundColor: 'rgba(0, 0, 0, 0.05)' }}>\n            © 2022 Copyright: \n            <a className='text-reset fw-bold' href='#!'>\n                  STABU - Start A Business\n            </a>\n          </div>\n        </MDBFooter>\n      );\n}\n\nexport default Footer;\n","import React, {useState} from 'react';\nimport { MDBContainer, MDBInput, MDBRow, MDBIcon, MDBCol, MDBCheckbox, MDBBtn } from 'mdb-react-ui-kit';\nimport { contractAddress } from \"../utils/constants\";\nimport {useStore} from \"./App\";\nimport {Loader, SuccessPayed} from \"./index\";\n\n\n\nconst ContractOverview = () => {\n\n    const [isLoading, setIsLoading] = useState(false);\n    const [isReceived, setIsReceived] = useState(null);\n\n    //all needed states are imported\n    const companyName = useStore((state)  => state.companyName);\n    const companyBalance = useStore((state)  => state.companyBalance);\n    const companyMembers = useStore((state)  => state.companyMembers);\n    const contractSigner = useStore((state)  => state.contractSigner);\n    const contractProvider = useStore((state)  => state.contractProvider);\n\n\n    //get company info based on the companyId\n    const getCompanyInfo = async (e) => {\n        e.preventDefault();\n        console.log(\"Company Info Button wurde geklickt.\")\n        //get all data of the form\n        const getCompany = new FormData(e.target);\n        //try to get all information based on the companyId, in case no company exists throw the error\n        try{\n            const companyName = await contractProvider.getCompanyById(getCompany.get(\"companyId-2\"));\n            useStore.setState({companyName: companyName});\n            const companyBalance = await contractProvider.getCompanyBalanceById(getCompany.get(\"companyId-2\"));\n            useStore.setState({companyBalance: companyBalance.toString()});\n            const companyMembers = [] = await contractProvider.getMembersById(getCompany.get(\"companyId-2\"));\n            useStore.setState({companyMembers: companyMembers});\n        } catch (error) {\n            alert(error);\n        }\n\n    };\n\n    //pay share based on companyId\n    const payShare = async (e) => {\n        e.preventDefault();\n        console.log(\"PayShare Button wurde geklickt.\");\n\n        //get all data of the form\n        const share = new FormData(e.target);\n        //check if all needed fields are filled\n        if (!share.get(\"amountToPay\") || !share.get(\"companyId\")) {alert(\"Bitte fülle das Formular aus.\"); return;}\n        //execute found company function, if company already exists, throw error alert\n        try {\n            setIsLoading(true);\n            await contractSigner.payShare(share.get(\"companyId\"), {value: share.get(\"amountToPay\")});\n            contractSigner.on(\"Received\", (value,addressSender,companyId, event) => {\n                setIsLoading(false)\n                setIsReceived({value: value.toNumber(), addressSender: addressSender.toString(), companyId: companyId.toNumber(), txHash: event.transactionHash})\n                return () => {\n                    contractProvider.removeAllListeners(\"Received\");\n                }\n            })\n        }\n        catch (error) {\n            alert(error);\n            setIsLoading(false)\n        }\n\n    }\n\n\n\n    return (\n        <MDBContainer>\n            <div className='p-5' >\n                <MDBRow size>\n                    <MDBCol size='12'>\n                        <div className='text-center'>\n                            <h2 className='mb-5'>Gesellschaftervertrag</h2>\n                        </div>\n                    </MDBCol>\n                    <MDBCol size='6'>\n                        <label>Contract Address</label>\n                        <MDBInput className='mb-3'\n                            label={contractAddress}\n                            placeholder= {contractAddress}\n                            id='formControlReadOnly'\n                            type='text'\n                            disabled\n                        />\n                        <label>Company Name</label>\n                        <MDBInput className='mb-3'\n                                  label={companyName}\n                                  placeholder= {companyName}\n                                  id='formControlReadOnly'\n                                  type='text'\n                                  disabled\n                        />\n                        <label>\n                            Kontostand\n                        </label>\n                        <MDBInput className='mb-3'\n                            label= {companyBalance}\n                            placeholder= {companyBalance}\n                            id='formControlReadOnly'\n                            type='text'\n                            disabled\n                        />\n                        <label>Gesellschafter</label>\n                        <MDBInput\n                            className='mb-3'\n                            placeholder='address'\n                            label={companyMembers[0]}\n                            id='formControlReadOnly'\n                            type='text'\n                            disabled\n                        />\n                        <MDBInput\n                            className='mb-3'\n                            placeholder='address'\n                            label={companyMembers[1]}\n                            id='formControlReadOnly'\n                            type='text'\n                            disabled\n                        />\n                        <MDBInput\n                            className='mb-3'\n                            placeholder='address'\n                            label={companyMembers[2]}\n                            id='formControlReadOnly'\n                            type='text'\n                            disabled\n                        />\n                    </MDBCol>\n                    <MDBCol size='1'>\n                    </MDBCol>\n\n                    <MDBCol size='5'>\n                        {/*<div>Status</div>*/}\n                        {/*<MDBCheckbox name='disabledCheck' value='' id='flexCheckDisabled' checked disabled label='unterzeichnet' />*/}\n                        {/*<MDBCheckbox name='disabledCheck' value='' id='flexCheckCheckedDisabled' defaultChecked disabled label='in Bearbeitung' />*/}\n                        {/*<br/>*/}\n                        <div>Einzahlung</div>\n                        <form onSubmit={payShare}>\n                            <MDBInput className='mb-3' label='Wei einzahlen' placeholder=\"Wei\" name=\"amountToPay\" type='number'  />\n                            <MDBInput className='mb-3' label='Company ID' placeholder=\"Company ID\" name=\"companyId\" type='number'  />\n\n\n                            {isLoading\n                                ? <Loader />\n                                : (\n                                    <div >\n                                        <MDBIcon fab icon=\"ethereum\" className='mr-3'/>\n                                        <MDBBtn type='submit'>Einzahlen</MDBBtn><br/><br/>\n                                    </div>\n                                )\n                            }\n\n                        </form>\n\n                        <form onSubmit={getCompanyInfo}>\n                            <br/>\n                            <MDBInput className='mb-3' label='Company ID' placeholder=\"Company ID\" name=\"companyId-2\" type='number'  />\n                            <MDBIcon icon=\"address-card\" className='mr-3'/>\n                            <MDBBtn type='submit' >Company Info laden </MDBBtn>\n                        </form>\n                        {isReceived !== null\n                            && <SuccessPayed isReceived={isReceived}/>\n                        }\n                    </MDBCol>\n                </MDBRow>\n\n            </div>\n        </MDBContainer>\n    );\n}\nexport default ContractOverview;","import React from 'react';\nimport {useStore} from \"./App\";\n\n\nconst ConnectWalletButton = () => {\n    const currentAccount = useStore(state => state.currentAccount)\n    const isLoggedIn = useStore(state => state.isLoggedIn)\n\n    const connectWalletHandler = async () => {\n        const { ethereum } = window;\n\n        if (!ethereum) {\n            alert(\"Please install MetaMask!\");\n        }\n        try {\n            const accounts = await ethereum.request({ method: 'eth_requestAccounts' });\n            useStore.setState({currentAccount: accounts[0]})\n            //setCurrentAccount(accounts[0]);\n            //setIsLoggedIn(true);\n            useStore.setState({isLoggedIn: true})\n\n            console.log(\"Found account! Address: \", accounts[0]);\n        }\n        catch (err) {\n            console.log(err);\n        }\n    }\n\n    return (\n        <button onClick={connectWalletHandler} className='btn connect-wallet-button btn-primary'>\n            {isLoggedIn ?  'Your Account: ...' + currentAccount.substring(currentAccount.length-5, currentAccount.length) : 'Connect Wallet'}\n        </button>\n    )\n}\n\nexport default ConnectWalletButton;\n\n","import React from 'react';\nimport ConnectWalletButton from './ConnectWalletButton'\nimport {\n    MDBNavbar,\n    MDBNavbarNav,\n    MDBNavbarItem,\n    MDBNavbarLink,\n    MDBNavbarToggler,\n    MDBContainer,\n    MDBIcon, MDBNavbarBrand\n} from 'mdb-react-ui-kit';\n\n\n\n\nconst Navbar = () => {\n\n    return (\n        <header>\n            <MDBNavbar fixed='top' id='nav' expand='lg' light >\n                <MDBContainer >\n                    <MDBNavbarToggler\n                        aria-controls='navbarExample01'\n                        aria-expanded='false'\n                        aria-label='Toggle navigation'\n                    >\n                        <MDBIcon fas icon='bars'/>\n                    </MDBNavbarToggler>\n\n                        <MDBNavbarBrand href='#'>\n                            <img\n                                src='/Users/felixwilberg/code/found_company/public/Logo.jpeg'\n                                height='30'\n                                alt=''\n                            />\n                        </MDBNavbarBrand>\n\n                    <div className='collapse navbar-collapse' id='navbarExample01'>\n                        <MDBNavbarNav right className='mb-2 mb-lg-0'>\n                            <MDBNavbarItem active>\n                                <MDBNavbarLink id='NavLink' aria-current='page' href='#'>\n                                    Home\n                                </MDBNavbarLink>\n                            </MDBNavbarItem>\n                            <MDBNavbarItem> \n                                <MDBNavbarLink id='NavLink' href='/#FoundCompany'>Gründen</MDBNavbarLink>\n                            </MDBNavbarItem>\n                            <MDBNavbarItem>\n                                <MDBNavbarLink id='NavLink' href='/#Overview'>Übersicht</MDBNavbarLink>\n                            </MDBNavbarItem>\n                            <MDBNavbarItem>\n                                <MDBNavbarLink id='NavLink' href='/#LeaveCompany'>Auflösen</MDBNavbarLink>\n                            </MDBNavbarItem>\n                            <MDBNavbarItem className= 'ml-auto'>\n                                <ConnectWalletButton />\n                            </MDBNavbarItem>\n                        </MDBNavbarNav>\n                    </div>\n                </MDBContainer>\n            </MDBNavbar>\n        </header>\n    );\n}\nexport default Navbar;","import React, {useEffect, useState} from \"react\";\nimport {useStore} from \"./App\";\n\nimport {\n    MDBContainer,\n    MDBCard,\n    MDBCardBody,\n    MDBCardTitle,\n    MDBCardText,\n    MDBBtn,\n    MDBCardFooter, MDBRow\n} from 'mdb-react-ui-kit';\n\nconst TxList = () => {\n\n    const contractProvider = useStore((state) => state.contractProvider)\n    const [eventList, setEventList] = useState([])\n\n    const fetchOldEvents = async () => {\n        const items = await contractProvider.queryFilter(\"*\"); //* --> all events\n        console.log(items);\n        setEventList(items);\n    }\n\n    useEffect(() => {\n        if (contractProvider === null) return\n        //load all historic events of the contract\n\n        fetchOldEvents().catch((error) => console.error(\"Fehler! \", error))\n\n        contractProvider.on(\"Founded\", fetchOldEvents);\n        contractProvider.on(\"Received\", fetchOldEvents);\n        contractProvider.on(\"Dissolved\", fetchOldEvents);\n        contractProvider.on(\"Left\", fetchOldEvents);\n        return () => {\n            contractProvider.removeAllListeners();\n            setEventList([]);\n        };\n        //if contract changes, reload this function\n    }, [contractProvider])\n\n\n\n    return (\n        <>\n            <MDBContainer className='pt-5 pb-5'>\n                <h2 className='pt-5 pb-5 text-center'>Alle Transaktionen</h2>\n                <MDBRow>\n                    {eventList.sort((eventOne, eventTwo) => eventTwo.blockNumber - eventOne.blockNumber).map(({args, event, transactionHash, blockNumber}, index) => (\n                        <div key={index}>\n                            <MDBCard className='mb-2 w-50'>\n                                <MDBCardBody>\n                                    <MDBCardTitle>{event.toString()}</MDBCardTitle>\n                                    {event.toString() === \"Founded\" ? <>\n                                        <MDBCardText>Company Name: {args.name}</MDBCardText>\n                                        <MDBCardText>Company ID: {args.companyId.toNumber()}</MDBCardText>\n                                        <MDBCardText>Member amount: {args.memberAmount.toNumber()}</MDBCardText>\n                                        <MDBCardText>Member\n                                            CapitalGoal: {args.foundingcapitalgoal.toNumber()}</MDBCardText>\n                                    </> : event.toString() === \"Received\" ? <>\n                                        <MDBCardText>Company ID: {args.companyId.toNumber()}</MDBCardText>\n                                        <MDBCardText>Amount: {args.value.toNumber()} Wei</MDBCardText>\n                                        <MDBCardText>Sender: {args.sender}</MDBCardText>\n                                    </> : event.toString() === \"Dissolved\" ?\n                                        <>\n                                            <MDBCardText>Company ID: {args.companyId.toNumber()}</MDBCardText>\n                                            <MDBCardText>Name: {args.name}</MDBCardText>\n                                            <MDBCardText>Adresse: {args.sender}</MDBCardText>\n                                        </> : <>\n                                            <MDBCardText>Company ID: {args.companyId.toNumber()}</MDBCardText>\n                                            <MDBCardText>Name: {args.name}</MDBCardText>\n                                            <MDBCardText>Adresse: {args.sender}</MDBCardText>\n                                        </>\n                                    }\n                                    <MDBBtn href={`https://ropsten.etherscan.io/tx/${transactionHash}`} target=\"_blank\">\n                                        Check in block explorer\n                                    </MDBBtn>\n                                </MDBCardBody>\n                                <MDBCardFooter>Blocknumber: {blockNumber}</MDBCardFooter>\n                            </MDBCard>\n                        </div>\n                    ))}\n                </MDBRow>\n            </MDBContainer>\n        </>\n    );\n}\n\nexport default TxList;\n\n","import React from 'react';\nimport {ContractOverview, Footer, Form, LeaveOrDissolveCompany}  from './index'\nimport { MDBContainer, } from 'mdb-react-ui-kit';\nimport TxList from \"./TxList\";\n\n\n\nconst Main = () => {\n    return(\n        <div>\n            <div id='FoundCompany'>\n            <MDBContainer className='pt-5'>\n                <div className='mb-5 text-center'>\n                    <h2 className='mt-5 mb-3'>Gesellschaftervertrag aufsetzen</h2>\n                    <p className='p-3'>Zur Erstellung des Gesellschaftervertrags benötigen wir einige Informationen. Bitte fülle das unten stehende Formular aus.</p>\n                </div>\n                <Form />\n            </MDBContainer>\n            </div>\n            <div id='Overview'>\n            <ContractOverview />\n            </div>\n            <div id='LeaveCompany'>\n            <LeaveOrDissolveCompany />\n                <TxList />\n            </div>\n            <Footer />\n        </div>\n\n        );\n}\n\nexport default Main;","import React from 'react';\n\nconst Loader = () => (\n\n    <div className=\"d-flex justify-content-center\">\n        <div className=\"spinner-border\" role=\"status\">\n            <span className=\"visually-hidden\">Loading...</span>\n        </div>\n    </div>\n);\n\nexport default Loader;","import React from 'react';\n\n\n//this component will be displayed once  a company was successfully received\n\nconst Success = ({isReceived}) => {\n        return (\n            <>\n                        <div key={isReceived.companyId}>\n                                <div className=\"alert alert-success my-3\" role=\"alert\" data-mdb-color=\"success\">\n                                    <i className=\"fas fa-check-circle me-3\"></i>\n                                        <p>Ether wurde eingezahlt:</p>\n                                        <p>Menge: {isReceived.value}</p>\n                                        <p>CompanyId: {isReceived.companyId}</p>\n                                        <p>Adresse: {isReceived.addressSender}</p>\n                                        <a href={`https://ropsten.etherscan.io/tx/${isReceived.txHash}`} target=\"_blank\">\n                                                Check in block explorer\n                                        </a>\n                                </div>\n                        </div>\n\n            </>\n        );\n}\n\nexport default Success;","import React from 'react';\n\n\n//this component will be displayed once  a company was successfully founded\n\nconst SuccessFounded = ({companyFounded}) => {\n        return (\n            <>\n                        <div key={companyFounded.companyId}>\n                                <div className=\"alert alert-success my-3\" role=\"alert\" data-mdb-color=\"success\">\n                                    <i className=\"fas fa-check-circle me-3\"></i>\n                                        <p>Die Firma wurde gegründet:</p>\n                                        <p>CompanyID: {companyFounded.companyId}</p>\n                                        <p>name: {companyFounded.companyName}</p>\n                                        <p>foundingCapitalGoal: {companyFounded.foundingCapitalGoal}</p>\n                                        <p>memberAmount: {companyFounded.memberAmount}</p>\n                                        <a href={`https://ropsten.etherscan.io/tx/${companyFounded.txHash}`} target=\"_blank\">\n                                                Check in block explorer\n                                        </a>\n                                </div>\n                        </div>\n\n            </>\n        );\n}\n\nexport default SuccessFounded;","import React from 'react';\n\n\n//this component will be displayed once  a company was successfully founded\n\nconst SuccessDissolved = ({isDissolved}) => {\n        return (\n            <>\n                        <div key={isDissolved.companyId}>\n                                <div className=\"alert alert-success my-3\" role=\"alert\" data-mdb-color=\"success\">\n                                    <i className=\"fas fa-check-circle me-3\"></i>\n                                        <p>Die Firma wurde aufgelöst:</p>\n                                        <p>CompanyID: {isDissolved.companyId}</p>\n                                        <p>name: {isDissolved.companyName}</p>\n                                        <p>Adresse: {isDissolved.addressSender}</p>\n                                        <a href={`https://ropsten.etherscan.io/tx/${isDissolved.txHash}`} target=\"_blank\">\n                                                Check in block explorer\n                                        </a>\n                                </div>\n                        </div>\n\n            </>\n        );\n}\n\nexport default SuccessDissolved;","import React from 'react';\n\n\n//this component will be displayed once  a company was successfully founded\n\nconst SuccessLeave = ({isLeft}) => {\n        return (\n            <>\n                        <div key={isLeft.companyId}>\n                                <div className=\"alert alert-success my-3\" role=\"alert\" data-mdb-color=\"success\">\n                                    <i className=\"fas fa-check-circle me-3\"></i>\n                                        <p>Die Firma wurde verlassen:</p>\n                                        <p>CompanyID: {isLeft.companyId}</p>\n                                        <p>name: {isLeft.companyName}</p>\n                                        <p>Adresse: {isLeft.addressSender}</p>\n                                        <a href={`https://ropsten.etherscan.io/tx/${isLeft.txHash}`} target=\"_blank\">\n                                                Check in block explorer\n                                        </a>\n                                </div>\n                        </div>\n\n            </>\n        );\n}\n\nexport default SuccessLeave;","import {MDBBtn, MDBCol, MDBContainer, MDBInput, MDBRow} from 'mdb-react-ui-kit';\nimport React, {useState} from 'react';\nimport {useStore} from \"./App\";\nimport {Loader, SuccessLeave, SuccessDissolved} from \"./index\";\n\n\nconst LeaveOrDissolveCompany = () => {\n\n    //import all needed states\n    const contractSigner = useStore((state)  => state.contractSigner);\n\n    const [isLoadingDissolve, setIsLoadingDissolve] = useState(false);\n    const [isDissolved, setIsDissolved] = useState(null);\n    const [isLoadingLeave, setIsLoadingLeave] = useState(false);\n    const [isLeft, setIsLeft] = useState(null);\n\n    //dissolve a specific company based on companyId\n    const dissolveCompany = async (e) => {\n        e.preventDefault();\n        console.log(\"Firma auflösen Button wurde geklickt.\")\n        //get all data of the form\n        const dissolveCompanyInput = new FormData(e.target);\n        //check if all needed fields are filled\n        if (!dissolveCompanyInput.get(\"companyIdDissolve\")) {alert(\"Bitte fülle das Formular aus.\"); return;}\n        //execute leaveCompany  function, if company already exists, throw error alert\n        try {\n            setIsLoadingDissolve(true);\n            await contractSigner.dissolveCompany(dissolveCompanyInput.get(\"companyIdDissolve\"));\n            contractSigner.on(\"Dissolved\", (companyId,companyName, addressSender, event) => {\n                setIsLoadingDissolve(false);\n                setIsDissolved({\n                    companyId: companyId.toNumber(),\n                    companyName: companyName.toString(),\n                    addressSender: addressSender.toString(),\n                    txHash: event.transactionHash\n                })\n                return () => {\n                    contractSigner.removeAllListeners(\"Dissolved\");\n                }\n            })\n        }\n        catch (error) {\n            setIsLoadingDissolve(false);\n            alert(error);\n        }\n    };\n\n    //leave a specific company based on companyId\n    const leaveCompany = async (e) => {\n        e.preventDefault();\n        console.log(\"Firma verlassen Button wurde geklickt\")\n        //get all data of the form\n        const leaveCompanyInput = new FormData(e.target);\n        //check if all needed fields are filled\n        if (!leaveCompanyInput.get(\"companyIdLeave\")) {alert(\"Bitte fülle das Formular aus.\"); return;}\n        //execute leaveCompany  function, if company already exists, throw error alert\n        try {\n            setIsLoadingLeave(true);\n            await contractSigner.leaveCompany(leaveCompanyInput.get(\"companyIdLeave\"));\n            contractSigner.on(\"Left\", (companyId,companyName, addressSender, event) => {\n                setIsLoadingLeave(false);\n                setIsLeft({\n                    companyId: companyId.toString(),\n                    companyName: companyName.toString(),\n                    addressSender: addressSender.toString(),\n                    txHash: event.transactionHash\n                })\n                return () => {\n                    contractSigner.removeAllListeners(\"Left\");\n                }\n            })\n        }\n        catch (error) {\n            setIsLoadingLeave(false);\n            alert(error);\n        }\n    };\n\n\n    return (\n        <div>\n            <MDBContainer className='pt-5 pb-5'>\n                <h2 className='pt-5 pb-5 text-center'>Firma auflösen oder Firma verlassen</h2>\n                <MDBRow>\n                    <MDBCol size='6'>\n                        <div className='text-center'>\n                            Firma auflösen<br />\n                            <form onSubmit={dissolveCompany}>\n                                <MDBInput className='mb-3' label='Company ID' placeholder=\"Company ID\" name=\"companyIdDissolve\" type='number'  />\n                                {isLoadingDissolve\n                                    ? <Loader />\n                                    : (\n                                        <div>\n                                            <MDBBtn type='submit'>Firma auflösen</MDBBtn>\n                                        </div>\n                                    )\n                                }\n                            </form>\n                            {isDissolved !== null\n                                && <SuccessDissolved isDissolved={isDissolved}/>\n                            }\n                        </div>\n                    </MDBCol>\n                    <MDBCol size='6'>\n                        <div className='text-center'>\n                            Firma verlassen<br />\n                            <form onSubmit={leaveCompany}>\n                                <MDBInput className='mb-3' label='Company ID' placeholder=\"Company ID\" name=\"companyIdLeave\" type='number'  />\n                                {isLoadingLeave\n                                    ? <Loader />\n                                    : (\n                                        <div>\n                                            <MDBBtn type='submit'>Firma verlassen</MDBBtn>\n                                        </div>\n                                    )\n                                }\n                            </form>\n                            {isLeft !== null\n                                && <SuccessLeave isLeft={isLeft}/>\n                            }\n\n                        </div>\n                    </MDBCol>\n                </MDBRow>\n            </MDBContainer>\n        </div>\n    )\n}\nexport default LeaveOrDissolveCompany;\n\n","import React, { useEffect} from \"react\";\nimport { ethers } from \"ethers\";\nimport create from \"zustand\";\nimport { contractABI, contractAddress } from \"../utils/constants\";\n\nimport \"./App.css\";\nimport 'mdb-react-ui-kit/dist/css/mdb.min.css';\nimport { HeroSection, Navbar, Main} from \"./index\";\n\n\n\n//All states are saved within this store\nexport const useStore = create((set) => ({\n    currentAccount: '',\n    isLoggedIn: false,\n    isLoading: false,\n    isFounded: false,\n    address: null,\n    txs: [\n        { companyId: null, name: '', foundingCapitalGoal: 0, memberAmount: 0, txHash: null }\n    ],\n    contractSigner: null, //for read only\n    contractProvider: null, //for writing to blockchain\n    companyName: '',\n    companyBalance: '',\n    companyMembers: [],\n    companyId: '',\n    amountShareHolders: 0,\n    foundingCapital: 0,\n    contractInfo: [\n        { governance: null, amountShareHolders: 0, foundingCapital: 0 }\n    ],\n    formData: [\n        { companyName: '', name: \"\" }\n    ],\n    balanceInfo: [\n        { companyId: null, address: '', balance: 0 }\n    ],\n    companyInfo:[\n        { companyId: null, name: '', foundingCapitalGoal: 0, memberAmount: 0, txHash: null }\n   ],\n    addCompanyInfo: (company) =>\n        set((state) => ({\n            companyInfo: [\n                { companyId: company.companyId, name: company.name, foundingCapitalGoal: company.foundingCapitalGoal, memberAmount: company.memberAmount },\n                ...state.companyInfo,\n            ]})),\n}))\n\n\nconst App = () => {\n    const {ethereum} = window;\n    const contractProvider = useStore((state) => state.contractProvider);\n    const contractSigner = useStore((state) => state.contractSigner);\n\n\n    useEffect(() => {\n        checkWalletIsConnected()\n            .then(r => {\n                console.log(r)\n            });\n        createEthereumContract();\n        }, [],\n    )\n\n\n\n\n    const checkWalletIsConnected = async () => {\n        const {ethereum} = window;\n\n        if (!ethereum) {\n            alert(\"Please install MetaMask!\");\n        } else {\n            console.log(\"Wallet exists. Let's go.\")\n        }\n\n        const accounts = await ethereum.request({method: 'eth_accounts'})\n        if (accounts.length !== 0) {\n            const account = accounts[0];\n            console.log(\"Found an authorized account:\", account);\n            useStore.setState({currentAccount: accounts[0]})\n            useStore.setState({isLoggedIn: true})\n        } else {\n            console.log(\"No authorized account found.\")\n        }\n    }\n\n\n    const createEthereumContract = () => {\n        const provider = new ethers.providers.Web3Provider(ethereum);\n        const signer = provider.getSigner();\n        const companyContractSigner = new ethers.Contract(contractAddress, contractABI, signer);\n        useStore.setState({contractSigner: companyContractSigner})\n        const companyContractProvider = new ethers.Contract(contractAddress, contractABI, provider);\n        useStore.setState({contractProvider: companyContractProvider})\n    };\n\n\n        return (\n            <>\n                <Navbar/>\n                <HeroSection/>\n                <Main/>\n            </>\n        );\n\n}\nexport default App;\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n    window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n        /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n    if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n        // The URL constructor is available in all browsers that support SW.\n        const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n        if (publicUrl.origin !== window.location.origin) {\n            // Our service worker won't work if PUBLIC_URL is on a different origin\n            // from what our page is served on. This might happen if a CDN is used to\n            // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n            return;\n        }\n\n        window.addEventListener('load', () => {\n            const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n            if (isLocalhost) {\n                // This is running on localhost. Let's check if a service worker still exists or not.\n                checkValidServiceWorker(swUrl, config);\n\n                // Add some additional logging to localhost, pointing developers to the\n                // service worker/PWA documentation.\n                navigator.serviceWorker.ready.then(() => {\n                    console.log(\n                        'This web app is being served cache-first by a service ' +\n                        'worker. To learn more, visit https://bit.ly/CRA-PWA'\n                    );\n                });\n            } else {\n                // Is not localhost. Just register service worker\n                registerValidSW(swUrl, config);\n            }\n        });\n    }\n}\n\nfunction registerValidSW(swUrl, config) {\n    navigator.serviceWorker\n        .register(swUrl)\n        .then(registration => {\n            registration.onupdatefound = () => {\n                const installingWorker = registration.installing;\n                if (installingWorker == null) {\n                    return;\n                }\n                installingWorker.onstatechange = () => {\n                    if (installingWorker.state === 'installed') {\n                        if (navigator.serviceWorker.controller) {\n                            // At this point, the updated precached content has been fetched,\n                            // but the previous service worker will still serve the older\n                            // content until all client tabs are closed.\n                            console.log(\n                                'New content is available and will be used when all ' +\n                                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n                            );\n\n                            // Execute callback\n                            if (config && config.onUpdate) {\n                                config.onUpdate(registration);\n                            }\n                        } else {\n                            // At this point, everything has been precached.\n                            // It's the perfect time to display a\n                            // \"Content is cached for offline use.\" message.\n                            console.log('Content is cached for offline use.');\n\n                            // Execute callback\n                            if (config && config.onSuccess) {\n                                config.onSuccess(registration);\n                            }\n                        }\n                    }\n                };\n            };\n        })\n        .catch(error => {\n            console.error('Error during service worker registration:', error);\n        });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n    // Check if the service worker can be found. If it can't reload the page.\n    fetch(swUrl)\n        .then(response => {\n            // Ensure service worker exists, and that we really are getting a JS file.\n            const contentType = response.headers.get('content-type');\n            if (\n                response.status === 404 ||\n                (contentType != null && contentType.indexOf('javascript') === -1)\n            ) {\n                // No service worker found. Probably a different app. Reload the page.\n                navigator.serviceWorker.ready.then(registration => {\n                    registration.unregister().then(() => {\n                        window.location.reload();\n                    });\n                });\n            } else {\n                // Service worker found. Proceed as normal.\n                registerValidSW(swUrl, config);\n            }\n        })\n        .catch(() => {\n            console.log(\n                'No internet connection found. App is running in offline mode.'\n            );\n        });\n}\n\nexport function unregister() {\n    if ('serviceWorker' in navigator) {\n        navigator.serviceWorker.ready.then(registration => {\n            registration.unregister();\n        });\n    }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport 'bootstrap/dist/css/bootstrap.css'\nimport App from \"./Components/App.js\";\nimport * as serviceWorker from './serviceWorker';\n\n\n\nReactDOM.render(\n        <App />,\n    document.getElementById(\"root\"));\n\nserviceWorker.unregister();\n\n"],"sourceRoot":""}